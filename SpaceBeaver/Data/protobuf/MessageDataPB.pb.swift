// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: MessageDataPB.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Ca_Pigscanfly_Proto_Protocol: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case email // = 1
  case sms // = 2
  case twitter // = 3

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .email
    case 2: self = .sms
    case 3: self = .twitter
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .email: return 1
    case .sms: return 2
    case .twitter: return 3
    }
  }

}

#if swift(>=4.2)

extension Ca_Pigscanfly_Proto_Protocol: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Ca_Pigscanfly_Proto_MessageDataPB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var message: [Ca_Pigscanfly_Proto_Message] = []

  var fromDevice: Bool {
    get {return _fromDevice ?? false}
    set {_fromDevice = newValue}
  }
  /// Returns true if `fromDevice` has been explicitly set.
  var hasFromDevice: Bool {return self._fromDevice != nil}
  /// Clears the value of `fromDevice`. Subsequent reads from it will return its default value.
  mutating func clearFromDevice() {self._fromDevice = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt32? = nil
  fileprivate var _fromDevice: Bool? = nil
}

struct Ca_Pigscanfly_Proto_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  ///TODO change from_or_to to `to`
  var fromOrTo: String {
    get {return _fromOrTo ?? String()}
    set {_fromOrTo = newValue}
  }
  /// Returns true if `fromOrTo` has been explicitly set.
  var hasFromOrTo: Bool {return self._fromOrTo != nil}
  /// Clears the value of `fromOrTo`. Subsequent reads from it will return its default value.
  mutating func clearFromOrTo() {self._fromOrTo = nil}

  var `protocol`: Ca_Pigscanfly_Proto_Protocol {
    get {return _protocol ?? .unknown}
    set {_protocol = newValue}
  }
  /// Returns true if ``protocol`` has been explicitly set.
  var hasProtocol: Bool {return self._protocol != nil}
  /// Clears the value of ``protocol``. Subsequent reads from it will return its default value.
  mutating func clearProtocol() {self._protocol = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _text: String? = nil
  fileprivate var _fromOrTo: String? = nil
  fileprivate var _protocol: Ca_Pigscanfly_Proto_Protocol? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ca.pigscanfly.proto"

extension Ca_Pigscanfly_Proto_Protocol: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "EMAIL"),
    2: .same(proto: "SMS"),
    3: .same(proto: "TWITTER"),
  ]
}

extension Ca_Pigscanfly_Proto_MessageDataPB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageDataPB"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "message"),
    3: .standard(proto: "from_device"),
  ]

  public var isInitialized: Bool {
    if self._version == nil {return false}
    if self._fromDevice == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.message) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._version) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._fromDevice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    if !self.message.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._fromDevice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ca_Pigscanfly_Proto_MessageDataPB, rhs: Ca_Pigscanfly_Proto_MessageDataPB) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs.message != rhs.message {return false}
    if lhs._fromDevice != rhs._fromDevice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ca_Pigscanfly_Proto_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    3: .standard(proto: "from_or_to"),
    5: .same(proto: "protocol"),
  ]

  public var isInitialized: Bool {
    if self._text == nil {return false}
    if self._fromOrTo == nil {return false}
    if self._protocol == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fromOrTo) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._protocol) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fromOrTo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._protocol {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ca_Pigscanfly_Proto_Message, rhs: Ca_Pigscanfly_Proto_Message) -> Bool {
    if lhs._text != rhs._text {return false}
    if lhs._fromOrTo != rhs._fromOrTo {return false}
    if lhs._protocol != rhs._protocol {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
